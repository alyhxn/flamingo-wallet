const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

module.exports = contact_row

async function contact_row (opts = {}, protocol) {
  const { id, sdb } = await get(opts.sid)
  const { drive } = sdb

  const on = {
    style: inject,
    data: ondata
  }

  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })

  shadow.innerHTML = `
    <div class="contact-list"></div>
    <style></style>
  `

  const listContainer = shadow.querySelector('.contact-list')
  const style = shadow.querySelector('style')

  const subs = await sdb.watch(onbatch)
  return el

  function fail(data, type) {
    throw new Error('invalid message', { cause: { data, type } })
  }

  async function onbatch (batch) {
    for (const { type, paths } of batch) {
      const data = await Promise.all(
        paths.map(path => drive.get(path).then(file => file.raw))
      )
      const func = on[type] || fail
      await func(data, type)
    }
  }

  function inject (data) {
    style.textContent = data[0]
  }

  async function ondata (data) {
    const contacts = data[0]?.value || []
    renderContacts(contacts)
  }

  function renderContacts (contacts = []) {
    listContainer.innerHTML = '' // clear existing

    for (const contact of contacts) {
      const {
        avatar = '',
        name = '',
        message = '',
        time = '',
        unread = 0,
        online = false,
        lightining = false
      } = contact

      const row = document.createElement('div')
      row.className = 'contact-row'
      row.innerHTML = `
        <div class="contact-left">
          <div class="contact-avatar">
            <img src="${avatar}" alt="avatar" />
            ${online ? '<div class="online-dot"></div>' : ''}
          </div>
          <div class="contact-info">
            <div class="contact-name">${name}</div>
            <div class="contact-message">${message}</div>
          </div>
        </div>
        <div class="contact-right">
          <div class="contact-time">${time}</div>
          <div class="icon-wrapper  ${!lightining ? 'no-lightning' : ''}">
            ${lightining ? `<svg width="30" height="30" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg" id="IconChangeColor"> <path fill-rule="evenodd" clip-rule="evenodd" d="M11.3006 1.04621C11.7169 1.17743 12 1.56348 12 1.99995V6.99995L16 6.99995C16.3729 6.99995 16.7148 7.20741 16.887 7.53814C17.0592 7.86887 17.0331 8.26794 16.8192 8.57341L9.81924 18.5734C9.56894 18.931 9.11564 19.0849 8.69936 18.9537C8.28309 18.8225 8 18.4364 8 18L8 13H4C3.62713 13 3.28522 12.7925 3.11302 12.4618C2.94083 12.131 2.96694 11.732 3.18077 11.4265L10.1808 1.42649C10.4311 1.06892 10.8844 0.914992 11.3006 1.04621Z" fill="orange" id="mainIconPathAttribute" stroke="#f7931a" stroke-width="0"></path> </svg>`: ' '}
            ${unread > 0 ? `<div class="unread-badge">${unread}</div>` : ''}
          </div>
        </div>
      `
      listContainer.appendChild(row)
    }
  }
}


function fallback_module () {
  return {
    api (opts = {}) {
      return {
        drive: {
          'style/': {
            'contact_row.css': {
              '$ref': 'contact_row.css'
            }
          },
          'data/': {
            'opts.json': {
              raw: opts
            }
          }
        }
      }
    }
  }
}
