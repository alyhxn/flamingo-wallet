const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

module.exports = search_bar

async function search_bar (opts = {}) {
  const { id, sdb } = await get(opts.sid)
  const { drive } = sdb

  const on = {
    style: inject,
    data: ondata
  }

  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })

  shadow.innerHTML = `
    <div class="search-bar">
    </div>
    <style></style>
  `
  const style = shadow.querySelector('style')
  const row = shadow.querySelector('.search-bar')

  style.textContent = `
    .search-bar {
        display: flex;
        align-items: center;
        width: 100%;
        max-width: 260px;
        height: 40px;
        background-color: #f1f1f1;
        border-radius: 8px;
        overflow: hidden;
        margin-bottom: 16px;
        box-shadow: 0 0 2px rgba(0,0,0,0.2);
      }
      .search-text {
        flex: 1;
        padding: 0 12px;
        font-size: 15px;
        color: #555;
      }
      .search-icon {
        background-color: #ddd;
        padding: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
      }
      .search-icon:hover {
        background-color: #ccc;
      }
  `
  await sdb.watch(onbatch)

  return el

  function fail(data, type) {
    throw new Error('invalid message', { cause: { data, type } })
  }

  async function onbatch (batch) {
    for (const { type, paths } of batch) {
      const data = await Promise.all(
        paths.map(path => drive.get(path).then(file => file.raw))
      )
      const func = on[type] || fail
      await func(data, type)
    }
  }

  function inject (data) {
    style.textContent = data[0]
  }

   async function ondata (data) {
    const { avatar, name, message, time, unread, online, lightining } = data[0]
    row.innerHTML = `
     <div class="search-text">Search</div>
      <div class="search-icon">
        <svg width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="#555" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <circle cx="11" cy="11" r="8" />
          <line x1="21" y1="21" x2="16.65" y2="16.65" />
        </svg>
      </div>
      ` 
  }
}

function fallback_module () {
  return {
    api
  }
  function api (opts) {
    return {
        drive: {
          'data/': {
            'opts.json': {
              raw: opts
            }
          }
        }
    }
  }
}
