const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

module.exports = search_bar

async function search_bar (opts = {}) {
  // const { id, sdb } = await get(opts.sid)
  const { drive } = sdb

  const on = {
    style: inject,
    data: ondata
  }

  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })

  shadow.innerHTML = `
  <div class="search-bar">
    <input
      type="text"
      class="search-input"
      placeholder="Search"
      style="border: none; outline: none; font-size: 14px; background: transparent; flex: 1;"
    />
    <div class="search-icon">
      <svg width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="#555" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <circle cx="11" cy="11" r="8" />
        <line x1="21" y1="21" x2="16.65" y2="16.65" />
      </svg>
    </div>
    <style></style>
  `
  const style = shadow.querySelector('style')
  const row = shadow.querySelector('.search-bar')

  style.textContent = `
    .search-bar {
      display: flex;
      align-items: center;
      width: 100%;
      border: 1px solid gray;
      height: 50px;
      border-radius: 12px;
      margin-bottom: 16px;
    }

    .search-input {
      flex: 1;
      padding: 12px;
      font-size: 16px;
      color: #555;
    }
    .search-icon {
      padding: 8px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
    }
  `
  await sdb.watch(onbatch)

  return el

  function fail(data, type) {
    throw new Error('invalid message', { cause: { data, type } })
  }

  async function onbatch (batch) {
    for (const { type, paths } of batch) {
      const data = await Promise.all(
        paths.map(path => drive.get(path).then(file => file.raw))
      )
      const func = on[type] || fail
      await func(data, type)
    }
  }

  function inject (data) {
    style.textContent = data[0]
  }

   async function ondata (data) {
     }
}

function fallback_module () {
  return {
    api
  }
  function api (opts) {
    return {
        drive: {
          'data/': {
            'opts.json': {
              raw: opts
            }
          }
        }
    }
  }
}
