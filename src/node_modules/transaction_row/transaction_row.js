const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

module.exports = transaction_row

async function transaction_row (opts = {}, protocol) {
  const {drive} = sdb

  const avatar = opts.avatar || ''
  const tid = opts.tid || ''
  const ttime = opts.ttime || ''
  const tamount = opts.tamount || 0

  const on = {
    style: inject,
    data: ondata
  }

  
  const el = document.createElement('div')
  const shadow =  el.attachShadow({ mode: 'closed' })

  shadow.innerHTML = `
    <div class="transaction-row">
      <div class="transaction-detail">
        <div class="transaction-avatar">
          <img src="${avatar}" alt="avatar" />
        </div>
        <div class="transaction-data">
          <div class="transaction-id">${tid}</div>
          <div class="transaction-time">${ttime}</div>
        </div>
      </div>  
      <div class="transaction-amount">
        <span>${tamount} â‚¿</span>
      </div> 
    </div>
    <style></style>
  `

  const style = shadow.querySelector('style')
  style.textContent = `
    .transaction-id {
      font-size: 20px;
      margin-top: 2px;
    }
    .transaction-row {
      display: flex;
      flex-direction: row;
      align-items:start;
      justify-content: space-between;
      margin-top: 12px;
      font-size: 14px;
    }
    .transaction-detail{
      display: flex;
      flex-direction: row;
      align-items: center;
      gap: 10px;
    }
    .transaction-avatar img {
      width: 40px;
      height: 40px;
      border-radius: 50%; 
      margin-right: 10px;
    }
    .transaction-data{
      display: flex;
      flex-direction: column;
      text-align: start;
      
    }
    .transaction-time {
      display: flex;
      flex-direction: column;
      color: gray;
      text-align: start;
    }
    .transaction-amount {
      font-size: 20px;
    }

  `
  //await sdb.watch(onbatch)

  return el

  function fail(data, type) { throw new Error('invalid message', { cause: { data, type } }) }

  async function onbatch (batch) {
    for (const { type, paths } of batch){
      const data = await Promise.all(paths.map(path => drive.get(path).then(file => file.raw)))
      const func = on[type] || fail
      await func(data, type)
    }
  }

  function inject (data) {
     style.textContent = data[0]
  }

  async function ondata(data) {
    await renderValues(data[0]?.value || {})
  }

}

// ============ Fallback Setup for STATE ============

function fallback_module () {
  return {
    api (opts = {}) {
      return {
        drive: {
          'data/': {
            'opts.json': {
              raw: opts
            }
          }
        }
      }
    }
  }
}

