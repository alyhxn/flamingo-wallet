const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

module.exports = contacts_list

const create_contact_row = require('contact_row')

async function contacts_list (opts = {}) {
  const { id, sdb } = await get(opts.sid)
  const { drive } = sdb

  const on = {
    style: inject,
    data: ondata
  }

  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })

  shadow.innerHTML = `
    <div class="contact-list-container"></div>
    <style></style>
  `

  const style = shadow.querySelector('style')
  const containerEl = shadow.querySelector('.contact-list-container')


  const subs = await sdb.watch(onbatch)

  return el

  function fail(data, type) {
    throw new Error('invalid message', { cause: { data, type } })
  }

  async function onbatch (batch) {
    for (const { type, paths } of batch){
      const data = await Promise.all(paths.map(path => drive.get(path).then(file => file.raw)))
      const func = on[type] || fail
      await func(data, type)
    }
  }

  function inject (data) {
    style.textContent = data[0]
  }

  async function ondata(data) {
    const contacts = data[0]?.value || []
    await renderContacts(contacts)
  }

  async function renderContacts(contactList) {
    containerEl.innerHTML = `<div class="contact-list-header">Contacts</div>`
   
    for (const contact of contactList) {
      const row = await create_contact_row(contact)
      containerEl.appendChild(row)

    }
  }
}

function fallback_module () {
  return {
    api (opts = {}) {
      return {
        drive: {
          'style/': {
            'contacts_list.css': {
              '$ref': 'contacts_list.css'
            }
          },
          'data/': {
            'opts.json': {
              raw: opts
            }
          }
        },
    _: {
          '../src/node_modules/contacts_list': {
            $: '',
            mapping: {
              style: 'style',
              data: 'data'
            }
          }
        }
      }
    }
  }
}
