const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

const contact_row = require('contact_row')
const search_bar = require('search_bar') // Added search_bar require

module.exports = contacts_list

async function contacts_list(opts = {}) {
  const { id, sdb } = await get(opts.sid)
  const { drive } = sdb

  const on = {
    style: inject,
    data: ondata
  }

  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })

  shadow.innerHTML = `
    <div class="component-label">Contacts List</div>
    <div class="contact-list-container">
      <div class="contact-list-header">Contacts</div>
    </div>
    <style></style>
  `

  const style = shadow.querySelector('style')
  const contact_list_container = shadow.querySelector('.contact-list-container')

  const subs = await sdb.watch(onbatch)

  // If we have at least one sub, render the search bar first with its sid
  if (subs.length > 0) {
    contact_list_container.append(await search_bar({ sid: subs[0].sid })) // Pass sid to search_bar
  }

  // Now render each contact row
  for (const sub of subs) {
    contact_list_container.append(await contact_row(sub))
  }

  return el

  function fail(data, type) {
    throw new Error('invalid message', { cause: { data, type } })
  }

  async function onbatch(batch) {
    for (const { type, paths } of batch) {
      const data = await Promise.all(paths.map(path => drive.get(path).then(file => file.raw)))
      const func = on[type] || fail
      await func(data, type)
    }
  }

  function inject(data) {
    style.textContent = data[0]
  }

  async function ondata(data) {
  }
}

function fallback_module() {
  return {
    api,
    _: {
      'contact_row': {
        $: ''
      },
      'search_bar': { // Added search_bar reference
        $: ''
      }
    }
  }
  function api(opts) {
    const contact_row = {
      mapping: {
        style: 'style',
        data: 'data'
      }
    }
    const search_bar = {
      mapping: {
        style: 'style',
        data: 'data'
      }
    }

    opts.value.forEach((contact, index) => {
      contact_row[index] = contact
    })

    return {
      drive: {
        'style/': {
          'contacts_list.css': {
            '$ref': 'contacts_list.css'
          }
        },
        'data/': {
          'opts.json': {
            raw: opts
          }
        }
      },
      _: {
        contact_row,
        search_bar // Include search_bar here too
      }
    }
  }
}
