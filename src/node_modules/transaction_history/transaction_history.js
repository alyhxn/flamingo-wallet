const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

module.exports = transaction_history

async function transaction_history (opts = {},  ) {
  const { id, sdb } = await get(opts.sid)
  
  const {drive} = sdb

  const on = {
    style: inject,
    data: ondata
  }
  
  const el = document.createElement('div')
  const shadow =  el.attachShadow({ mode: 'closed' })

  shadow.innerHTML = `
    <div class="transaction-history-container">
      <div class="transaction-history-header">Transaction history</div>
      <div class="transaction-date">
        <span>Date</span>
      </div>
      <div class="transaction-row">
        <div class="transaction-detail">
          <div class="transaction-avatar">
            <img src="https://tse3.mm.bing.net/th/id/OIP.ut50yZEBEJYocBBFj3t30gHaFv?rs=1&pid=ImgDetMain&o=7&rm=3" alt="avatar" />
          </div>
          <div class="transaction-data">
            <div class="transaction-id">0 ₿</div>
            <div class="transaction-time">00:00 AM</div>
          </div>
        </div>  
        <div class="transaction-amount">
          <span>0.0000</span>
        </div>   
      </div>
    </div>
    <style></style>
  `

  const style = shadow.querySelector('style')
  
  await sdb.watch(onbatch)

  return el

  function fail(data, type) { throw new Error('invalid message', { cause: { data, type } }) }

  async function onbatch (batch) {
    for (const { type, paths } of batch){
      const data = await Promise.all(paths.map(path => drive.get(path).then(file => file.raw)))
      const func = on[type] || fail
      func(data, type)
    }
  }

  function inject (data) {
    style.replaceChildren((() => {
      return document.createElement('style').textContent = data[0]
    })())
  }

  function ondata(data) {
    renderValues(data[0]?.value || {})
  }
  

  function renderValues({ date = " ", tid = 0, ttime = "00:00", tamount = "↑ 0.00000" }) {
  shadow.querySelector('.transaction-date span').textContent = date.toString()
  shadow.querySelector('.transaction-id').textContent = `${tid.toString()} ₿`
  shadow.querySelector('.transaction-time').textContent = ttime.toString()
  shadow.querySelector('.transaction-amount').textContent = tamount.toString()
  }

}

// ============ Fallback Setup for STATE ============

function fallback_module () {
  return {
    api: fallback_instance
  }

  function fallback_instance (opts = {}) {
    return {
      drive: {
        'style/': {
          'transaction_history.css': {
           '$ref':'transaction_history.css'
          }
        },
        'data/': {
          'opts.json': {
            raw: opts
          }
        }
      }
    }
  }
}
