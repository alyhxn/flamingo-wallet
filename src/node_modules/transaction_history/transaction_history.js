const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

module.exports = transaction_history

const createTransactionRow = require('transaction_row')

async function transaction_history (opts = {}) {
  const { id, sdb } = await get(opts.sid)
  const { drive } = sdb

  const on = {
    style: inject,
    data: ondata
  }

  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })

  shadow.innerHTML = `
    <div class="transaction-history-container"></div>
    <style></style>
  `

  const style = shadow.querySelector('style')
  const subs = await sdb.watch(onbatch)

  return el

  function fail(data, type) {
    throw new Error('invalid message', { cause: { data, type } })
  }

  async function onbatch (batch) {
    for (const { type, paths } of batch){
      const data = await Promise.all(paths.map(path => drive.get(path).then(file => file.raw)))
      const func = on[type] || fail
      await func(data, type)
    }
  }

  function inject (data) {
    style.textContent = data[0]
  }

  async function ondata(data) {
    await renderValues(data[0]?.value || {})
  }

  async function renderValues(dataList) {
    const container = document.createElement('div')

    if (!Array.isArray(dataList)) dataList = [dataList]

    const grouped = {}
    for (const item of dataList) {
      const { date = "Unknown" } = item
      if (!grouped[date]) grouped[date] = []
      grouped[date].push(item)
    }

    for (const date in grouped) {
      const dateEl = document.createElement('div')
      dateEl.className = 'transaction-date'
      dateEl.innerHTML = `<span>${date}</span>`
      container.appendChild(dateEl)

      for (const tx of grouped[date]) {
        const { tid, ttime, tamount, avatar } = tx
        
        const row = await createTransactionRow({ tid, ttime, tamount, avatar })
        container.appendChild(row)
      }
    }

    const containerEl = shadow.querySelector('.transaction-history-container')
    containerEl.innerHTML = `<div class="transaction-history-header">Transaction history</div>`
    containerEl.appendChild(container)
  }
}

function fallback_module () {
  return {
    api (opts = {}) {
      return {
        drive: {
          'style/': {
            'transaction_history.css': {
              '$ref': 'transaction_history.css'
            }
          },
          'data/': {
            'opts.json': {
              raw: opts
            }
          }
        }
      }
    }
  }
}
